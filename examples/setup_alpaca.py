"""
Alpaca API Setup Assistant
Helps configure your Alpaca API credentials for the trading system.
"""

import os
import sys
from pathlib import Path

def check_alpaca_packages():
    """Check if Alpaca packages are installed"""
    try:
        import alpaca
        return True
    except ImportError:
        return False

def create_env_file():
    """Create .env file with API credentials"""
    print("\n🔧 Setting up your Alpaca API configuration")
    print("=" * 50)
    
    # Get credentials from user
    print("\n📋 Enter your Alpaca API credentials:")
    print("   (Get these from: https://app.alpaca.markets/paper/dashboard/overview)")
    
    api_key = input("\n🔑 API Key: ").strip()
    secret_key = input("🔐 Secret Key: ").strip()
    
    if not api_key or not secret_key:
        print("❌ API credentials cannot be empty!")
        return False
    
    # Create .env file
    env_content = f"""# Alpaca API Configuration
# Generated by setup script

ALPACA_API_KEY={api_key}
ALPACA_SECRET_KEY={secret_key}

# Trading Configuration
PAPER_TRADING=true
MAX_POSITIONS=5
POSITION_SIZE_PCT=0.1

# Risk Management
MAX_DAILY_LOSS_PCT=0.02
MAX_POSITION_VALUE=10000

# Data Settings
DEFAULT_LOOKBACK_DAYS=252
UPDATE_INTERVAL_MINUTES=15

# Logging
LOG_LEVEL=INFO
LOG_TO_FILE=true
"""
    
    try:
        env_file = Path(".env")
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"✅ Created .env file: {env_file.absolute()}")
        return True
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return False

def test_connection():
    """Test Alpaca API connection"""
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        from alpaca_integration import AlpacaIntegratedTrader
        
        api_key = os.getenv('ALPACA_API_KEY')
        secret_key = os.getenv('ALPACA_SECRET_KEY')
        
        print("\n🧪 Testing Alpaca API connection...")
        
        trader = AlpacaIntegratedTrader(api_key, secret_key, paper=True)
        account = trader.alpaca_trader.get_account_info()
        
        print("✅ Connection successful!")
        print(f"   Account ID: {account['account_id']}")
        print(f"   Portfolio Value: ${account['portfolio_value']:,.2f}")
        print(f"   Buying Power: ${account['buying_power']:,.2f}")
        
        return True
        
    except Exception as e:
        print(f"❌ Connection failed: {e}")
        return False

def main():
    """Main setup function"""
    print("🚀 Alpaca Trading System Setup")
    print("=" * 40)
    
    # Check if packages are installed
    if not check_alpaca_packages():
        print("❌ Alpaca packages not found!")
        print("📦 Installing required packages...")
        
        try:
            import subprocess
            subprocess.check_call([sys.executable, "-m", "pip", "install", 
                                 "alpaca-py", "python-dotenv"])
            print("✅ Packages installed successfully!")
        except Exception as e:
            print(f"❌ Failed to install packages: {e}")
            print("💡 Please run: pip install alpaca-py python-dotenv")
            return
    
    # Check if .env file exists
    if Path(".env").exists():
        print("📁 Found existing .env file")
        choice = input("🔄 Do you want to recreate it? (y/N): ").strip().lower()
        if choice != 'y':
            print("ℹ️  Using existing configuration")
        else:
            if not create_env_file():
                return
    else:
        if not create_env_file():
            return
    
    # Test connection
    if test_connection():
        print("\n🎉 Setup completed successfully!")
        print("\n📚 Next steps:")
        print("   1. Run the demo: python alpaca_demo.py")
        print("   2. Customize your trading strategy")
        print("   3. Monitor your paper trading results")
        print("\n⚠️  Remember: Always test with paper trading first!")
    else:
        print("\n❌ Setup incomplete - please check your API credentials")

if __name__ == "__main__":
    main()